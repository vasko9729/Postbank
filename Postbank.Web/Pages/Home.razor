@page "/"
@using Postbank.Web.Client
@using Postbank.Web.Client.Requests
@using Postbank.Web.Client.Responses
@inject IDataClient DataClient

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<div class="row no-gutters">
	<Button @onclick="SeedDatabaseAsync">Seed Database</Button>
	<Pagination ActivePageNumber="@currentPageNumber" TotalPages="@totalPages" PageChanged="OnPageChangedAsync" />

	<div class="col">
		<div class="leftside">
			<div class="grid-container">
				@foreach (var user in users)
				{
					<div class="grid-item">@user.FullName</div>
				}
			</div>

		</div>
	</div>

	<div class="col">
		<div class="rightside">

			<BarChart @ref="barChart" Width="1500" Height="1000" />

		</div>
	</div>
	
</div>

@code {

	private BarChart barChart = default!;
	private BarChartOptions barChartOptions = default!;
	private ChartData chartData = default!;
	private List<UserResponse> users = [];

	int totalPages = 1;
	int currentPageNumber = 1;

	protected override async Task OnInitializedAsync()
	{
		var result = await DataClient.GetHomeConfiguration();

		totalPages = result.TotalPages;

		var request = new UsersRequest();
		var usersResponse = await DataClient.GetUsers(request);

		users = usersResponse.Users;

		var userFullNames = usersResponse.Users.Select(x => x.FullName).ToList();
		var userTimeLogged = usersResponse.Users.Select(x => x.TimeLog).ToList();

		var datasets = new List<IChartDataset>();

		var dataset1 = new BarChartDataset()
			{
				Data = userTimeLogged,
				BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
				BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
				BorderWidth = new List<double> { 0 },
			};
		datasets.Add(dataset1);

		chartData = new ChartData { Labels = userFullNames, Datasets = datasets };

		barChartOptions = new BarChartOptions();
		barChartOptions.Responsive = true;
		barChartOptions.Interaction = new Interaction { Mode = InteractionMode.Y };
		barChartOptions.IndexAxis = "y";

		barChartOptions.Scales.X!.Title = new ChartAxesTitle { Text = "Logged Time", Display = true };
		barChartOptions.Scales.Y!.Title = new ChartAxesTitle { Text = "Users", Display = true };

		barChartOptions.Plugins.Legend.Display = false;

		await base.OnInitializedAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await barChart.InitializeAsync(chartData, barChartOptions);
		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task OnPageChangedAsync(int newPageNumber)
	{
		currentPageNumber = newPageNumber;

		var request = new UsersRequest() { CurrentPage = currentPageNumber };

		var usersResponse = await DataClient.GetUsers(request);

		users = usersResponse.Users;

		var userFullNames = usersResponse.Users.Select(x => x.FullName).ToList();
		var userTimeLogged = usersResponse.Users.Select(x => x.TimeLog).ToList();

		var datasets = new List<IChartDataset>();

		var dataset1 = new BarChartDataset()
			{
				Data = userTimeLogged,
				BackgroundColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
				BorderColor = new List<string> { ColorUtility.CategoricalTwelveColors[0] },
				BorderWidth = new List<double> { 0 },
			};
		datasets.Add(dataset1);

		chartData = new ChartData { Labels = userFullNames, Datasets = datasets };
		await barChart.UpdateValuesAsync(chartData);
	}

	private async Task SeedDatabaseAsync()
	{
		await DataClient.SeedDatabase();
	}
}
